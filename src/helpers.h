#ifndef HELPERS_H
#define HELPERS_H

static uint8_t SYMBOL_TO_CHIP_MAPPING[16][4] = {
					{0x03,0xf7,0x3a,0x1b},
					{0x39,0x70,0xaf,0x33},
					{0x9a,0x03,0xf7,0x3a},
					{0xb2,0x39,0x70,0x2f},
					{0x3b,0x9b,0x03,0x77},
					{0xae,0xb3,0x39,0x70},
					{0xf7,0x3a,0x9b,0x03},
					{0x70,0xaf,0xb3,0x39},
					{0xfc,0x08,0xc5,0x64},
					{0xc6,0x8f,0x50,0x4c},
					{0x65,0xfc,0x08,0x45},
					{0x4d,0xc6,0x8f,0x50},
					{0xc4,0x64,0xfc,0x08},
					{0x51,0x4c,0xc6,0x0f},
					{0x08,0xc5,0x64,0x7c},
					{0x8f,0x50,0x4c,0x46},
					};


int hamming(uint8_t *demod_buffer,uint8_t *pattern);
void shift_buffer(uint8_t *demod_buffer,int size);
int match_pattern(uint8_t *demod_buffer, uint8_t *pattern);
void decode(uint8_t *output_buffer, int *length, uint8_t *packet);

uint16_t update_fcs_dot15d4(uint8_t byte, uint16_t fcs);
uint16_t calculate_fcs_dot15d4(uint8_t *data, int size);
int check_fcs_dot15d4(uint8_t *data,int size);

#endif
